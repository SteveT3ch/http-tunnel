{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"http-tunnel","google":"","body":"# http-tunnel\r\n\r\nIf you are on the road, behind fifteen firewalls, and want to share some web application you're developing locally, or just share a set of files with someone real quick; this tool will do the job!\r\n\r\n`http-tunnel` will either forwarding incoming connections to a locally running webapp, or serve the current working directory (with an optional directory listing as well, if you don't have an index file) through an adhoc express instance.\r\n\r\nAnd yes, it supports WebSockets.\r\n\r\n## Install and usage\r\n\r\n```\r\n$ npm install -g http-tunnel\r\n$ mkdir somefolder\r\n$ cd somefolder\r\n$ echo hi > file.txt\r\n$ http-tunnel --server pub.2x.io -d -s\r\n```\r\n\r\nThis will create a tunnel through a custom url, such as `http://somehost.pub.2x.io` and serve the content of the `somefolder` directory (the `-s` argument), along with a directory index (`-d`).\r\n\r\nTo serve a local port, rather than the current directory, try the `-p [port]` argument.\r\n\r\nAnd if you want to use a custom hostname, try `-i foobar`, or anything else to your liking. If the name is currently available, that'll be serving you.\r\n\r\n### Note\r\n\r\nThe demonstration server, `pub.2x.io` is at the moment rate limited. Should you wish a higher bandwidth permanent solution, get in touch with me for pointers.\r\n\r\n## Hosting on a custom server\r\n\r\nThis can be hosted on any server, but really ought to be one with a wildcard dns pointed to it. In case of the testserver above, it is running HAProxy with an SSL terminator in front. If you're curious about the HAProxy config, leave an issue or drop me an email.","tagline":"node.js web tunnel - to share the localhost stuff you're working on no matter where you are"}